#!/bin/bash

if [[ -z "${ESHELL_HOME}" ]]; then
   echo "   Error: variable ESHELL_HOME not set."
   exit 1
fi

# set as default (none)
# 1 - x84_64
# 2 - i686
mode=0
gui=0
nolog=""
nodb=""
quiet=""
noinit=""
tcl=""
script=""
help=""
dir=""
workspace=""
# Note: allow to run tool with Valgrind memory checker
valgrind=0
# Note: allow GNU debugger
gdb=0

# process arguments to define if user explicitly requires specific architecture to be run
while [ $# -gt 0 ]
do
#echo "-- ${1} --"
   if [ "$1" == "-32" ] ; then
      mode=2
   elif [ "$1" == "-64" ] ; then
      mode=1
   elif [ "$1" == "-gui" ] ; then
      gui=1
   elif [ "$1" == "-nolog" ] ; then
      nolog="-nolog"
   elif [ "$1" == "-nodb" ] ; then
      nodb="-nodb"
   elif [ "$1" == "-quiet" ] ; then
      quiet="-quiet"
   elif [ "$1" == "-noinit" ] ; then
      noinit="-noinit"
   elif [ "$1" == "-tcl" ] ; then
      tcl="-tcl"
   elif [ "$1" == "-valgrind" ] ; then
      valgrind=1
   elif [ "$1" == "-valgrind_all" ] ; then
      valgrind=2
   elif [ "$1" == "-gdb" ] ; then
      gdb=1
   elif [ "$1" == "-script" ] ; then
      shift
      if [ $# -gt 0 ] ; then
         script="-script $1"
      else
         echo -e "\n   Error: no script provided.\n"
         exit 1
      fi
   elif [ "$1" == "-dir" ] ; then
      shift
      if [ $# -gt 0 ] ; then
         dir="-dir $1"
      else
         echo -e "\n   Error: no dir provided.\n"
         exit 1
      fi
   elif [ "$1" == "-workspace" ] ; then
      shift
      if [ $# -gt 0 ] ; then
         workspace="-workspace $1"
      else
         echo -e "\n   Error: no workspace provided.\n"
         exit 1
      fi
   elif [ "$1" == "-help" ] ; then
      help="-help"
   else
      cat << EOF

   Error: incorrect argument '$1' provided.


   Usage: eshell [-32 | -64] [-nodb] [-nolog] [-quiet] [-noinit] [-tcl] [-script <filename>] [-help] [-dir <directory>] [-workspace <name>]
                 [-gui]
                 [-valgrind] [-valgrind_all] [-gdb].

      [-32 | -64]               execute 32-bit or 64-bit version
      [-nodb]                   do not create database for compiled modules
      [-nolog]                  do not create log file
      [-quiet]                  do not write into console
      [-noinit]                 do not run initialization script
      [-tcl]                    run with TCL mode (used by GUI)
      [-script <filename>]      start <filename> script execution
      [-help]                   print help message
      [-dir <directory>]        set directory for logs and databases
      [-workspace <name>]       set workspace name (default, eshell)
      [-gui]                    lainch graphical user interface (GUI)
      [-valgrind]               run Valgrind to check memory issues (mutually exclusive with [-valgrind_all] and [-gdb])
      [-valgrind_all]           run Valgrind to check memory issues and leakages (mutually exclusive with [-valgrind] and [-gdb])
      [-gdb]                    run GNU debugger (mutually exclusive with [-valgrind] and [-valgrind_all])

EOF
      exit 1
   fi
   shift
done

# Note: detect if system is x86_64, or i686 (if none explicitly specified by the user)
if [ $mode = 0 ] ; then
   uname -p | grep -q "x86_64" && mode=1
   uname -p | grep -q "i686" && mode=2
fi

TOOL_EXEC=""
if [ $mode == 1 ] ; then
   if [ -z "${ESHELL_STATIC}" ]; then
      TOOL_EXEC=${ESHELL_HOME}/bin/x86_64.exe
   else
      TOOL_EXEC=${ESHELL_HOME}/bin/x86_64.s.exe
   fi
elif [ $mode == 2 ] ; then
   if [ -z "${ESHELL_STATIC}" ]; then
      TOOL_EXEC=${ESHELL_HOME}/bin/i686.exe
   else
      TOOL_EXEC=${ESHELL_HOME}/bin/i686.s.exe
   fi
else
   echo -e "\n   Error: unsupported platform '`uname -p`'\n"
   exit 1
fi

if ! [ -a ${TOOL_EXEC} ] ; then
   echo -e "\n   Error: failed to find binary '${TOOL_EXEC}'. Check installation.\n"
   exit 1
fi

if [ $valgrind == 1 ] ; then
   TOOL_EXEC="valgrind ${TOOL_EXEC}"
elif [ $valgrind == 2 ] ; then
   TOOL_EXEC="valgrind --leak-check=full --show-leak-kinds=all ${TOOL_EXEC}"
elif [ $gdb == 1 ] ; then
   TOOL_EXEC="gdb -ex run -ex where -ex quit --batch --args ${TOOL_EXEC}"
elif [ $gui == 1 ] ; then
# TODO: provide 64/32 to caller inside tcl... to allow their selection too
   TOOL_EXEC="wish ${ESHELL_HOME}/tcl/egui.tcl"
   if [ $mode == 1 ] ; then TOOL_EXEC="$TOOL_EXEC -64"; fi
   if [ $mode == 2 ] ; then TOOL_EXEC="$TOOL_EXEC -32"; fi
   nodb=""
   nolog=""
   quiet=""
   noinit="-noinit"
   tcl="-tcl"
   script=""
   help=""
#    dir=""
#   workspace=""
fi

$TOOL_EXEC $nodb $nolog $quiet $noinit $tcl $script $help $dir $workspace
if [ $? != 0 ] ; then
# Q: tool should exit, if it does not receive response from GUI!?
   echo "   Error: program terminated incorrectly, need to handle tool..."
fi
# TODO: for GUI mode, check [pid] is closed... need to get pid onGUI run
